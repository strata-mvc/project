<?php

class ITSEC_Malware_Scheduling_Admin {

	private
		$settings,
		$core,
		$module_path;

	function run( $core ) {

		$this->core        = $core;
		$this->settings    = get_site_option( 'itsec_malware_scheduling' );
		$this->module_path = ITSEC_Lib::get_module_path( __FILE__ );

		add_action( 'itsec_add_admin_meta_boxes', array( $this, 'itsec_add_admin_meta_boxes' ) ); //add meta boxes to admin page
		add_action( 'itsec_admin_init', array( $this, 'itsec_admin_init' ) ); //initialize admin area
		add_action( 'admin_enqueue_scripts', array( $this, 'admin_enqueue_scripts' ) ); //enqueue scripts for admin page
		add_action( 'wp_ajax_itsec_jquery_malware_filetree_ajax', array( $this, 'wp_ajax_itsec_jquery_malware_filetree_ajax' ) );

		//manually save options on multisite
		if ( is_multisite() ) {
			add_action( 'itsec_admin_init', array( $this, 'itsec_admin_init_multisite' ) ); //save multisite options
		}

	}

	/**
	 * Add malware scheduling admin Javascript
	 *
	 * @since 1.6
	 *
	 * @return void
	 */
	public function admin_enqueue_scripts() {

		global $itsec_globals;

		if ( isset( get_current_screen()->id ) && ( strpos( get_current_screen()->id, 'security_page_toplevel_page_itsec_pro' ) !== false ) ) {

			wp_enqueue_script( 'itsec_malware_scheduling_js', $this->module_path . 'js/admin-malware-scheduling.js', array( 'jquery' ), $itsec_globals['plugin_build'] );
			wp_localize_script(
				'itsec_malware_scheduling_js',
				'itsec_malware_scheduling_js',
				array(
					'placeholder' => __( 'Click to choose file', 'it-l10n-ithemes-security-pro' ),
				)
			);
			wp_enqueue_script( 'itsec_repeatable_fields', $this->module_path . 'js/repeatable-fields.js', array( 'jquery', 'jquery-ui-sortable' ), $itsec_globals['plugin_build'] );

			wp_enqueue_script( 'itsec_jquery_filetree', $this->module_path . 'filetree/jqueryFileTree.js', array( 'jquery' ), '1.01' );
			wp_localize_script(
				'itsec_jquery_filetree',
				'itsec_jquery_filetree',
				array(
					'nonce'   => wp_create_nonce( 'itsec_jquery_filetree' ),
					'abspath' => ITSEC_Lib::get_home_path(),
					'title'   => __( 'Select a file', 'it-l10n-ithemes-security-pro' ),
				)
			);

			wp_register_style( 'itsec_jquery_filetree_style', $this->module_path . 'filetree/jqueryFileTree.css', array(), $itsec_globals['plugin_build'] ); //add multi-select css
			wp_enqueue_style( 'itsec_jquery_filetree_style' );

			wp_register_style( 'itsec_malware-scheduling_css', $this->module_path . 'css/admin-malware-scheduling.css', array(), $itsec_globals['plugin_build'] ); //add multi-select css
			wp_enqueue_style( 'itsec_malware-scheduling_css' );

		}

	}

	/**
	 * Add meta boxes to primary options pages
	 *
	 * @since 1.6
	 *
	 * @return void
	 */
	public function itsec_add_admin_meta_boxes() {

		$id    = 'malware_scheduling_options';
		$title = __( 'Malware Scan Scheduling', 'it-l10n-ithemes-security-pro' );

		add_meta_box(
			$id,
			$title,
			array( $this, 'metabox_malware_scheduling_settings' ),
			'security_page_toplevel_page_itsec_pro',
			'advanced',
			'core'
		);

		$this->core->add_pro_toc_item(
			array(
				'id'    => $id,
				'title' => $title,
			)
		);

	}

	/**
	 * Execute admin initializations
	 *
	 * @since 1.6
	 *
	 * @return void
	 */
	public function itsec_admin_init() {

		//Add Settings sections
		add_settings_section(
			'malware_scheduling-enabled',
			__( 'Enable Malware Scanner Scheduling', 'it-l10n-ithemes-security-pro' ),
			'__return_empty_string',
			'security_page_toplevel_page_itsec_pro'
		);

		add_settings_section(
			'malware_scheduling-settings-1',
			__( 'Malware Scheduling Settings', 'it-l10n-ithemes-security-pro' ),
			'__return_empty_string',
			'security_page_toplevel_page_itsec_pro'
		);

		add_settings_section(
			'malware_scheduling-settings-2',
			__( 'Malware Scheduling Settings', 'it-l10n-ithemes-security-pro' ),
			'__return_empty_string',
			'security_page_toplevel_page_itsec_pro'
		);

		//Add Settings Fields
		add_settings_field(
			'itsec_malware_scheduling[enabled]',
			__( 'Enable Scheduled Malware Scanning', 'it-l10n-ithemes-security-pro' ),
			array( $this, 'settings_field_enabled' ),
			'security_page_toplevel_page_itsec_pro',
			'malware_scheduling-enabled'
		);

		add_settings_field(
			'itsec_malware_scheduling[standard]',
			__( 'Enable Active Content Scanning', 'it-l10n-ithemes-security-pro' ),
			array( $this, 'settings_field_standard' ),
			'security_page_toplevel_page_itsec_pro',
			'malware_scheduling-settings-1'
		);

		add_settings_field(
			'itsec_malware_scheduling[individual]',
			__( 'Scheduled Individual Scans', 'it-l10n-ithemes-security-pro' ),
			array( $this, 'settings_field_individual' ),
			'security_page_toplevel_page_itsec_pro',
			'malware_scheduling-settings-2'
		);

		//Register the settings field for the entire module
		register_setting(
			'security_page_toplevel_page_itsec_pro',
			'itsec_malware_scheduling',
			array( $this, 'sanitize_module_input' )
		);

	}

	/**
	 * Prepare and save options in network settings
	 *
	 * @return void
	 */
	public function itsec_admin_init_multisite() {

		if ( isset( $_POST['itsec_malware_scheduling'] ) ) {

			if ( ! wp_verify_nonce( $_POST['_wpnonce'], 'security_page_toplevel_page_itsec_pro-options' ) ) {
				die( __( 'Security error!', 'it-l10n-ithemes-security-pro' ) );
			}

			update_site_option( 'itsec_malware_scheduling', $_POST['itsec_malware_scheduling'] ); //we must manually save network options

		}

	}

	/**
	 * Render the settings metabox
	 *
	 * @since 4.0
	 *
	 * @return void
	 */
	public function metabox_malware_scheduling_settings() {

		$malware_settings = get_site_option( 'itsec_malware' );

		if ( isset( $malware_settings['enabled'] ) && $malware_settings['enabled'] === true ) {

			echo '<p>';
			echo __( 'Use the options to below to enable scheduled malware scans of your site.', 'it-l10n-ithemes-security-pro' );
			printf( '<a class="button-secondary" style="float:right" href="?page=toplevel_page_itsec_logs&itsec_log_filter=malware">%s</a>', __( 'View logs of previous scans', 'it-l10n-ithemes-security-pro' ) );
			echo '</p>';

			$this->core->do_settings_section( 'security_page_toplevel_page_itsec_pro', 'malware_scheduling-enabled', false );

			echo '<div id="malware_scheduling-settings">';
			echo '<hr>';
			$this->core->do_settings_section( 'security_page_toplevel_page_itsec_pro', 'malware_scheduling-settings-1', false );
			echo '<hr>';
			$this->core->do_settings_section( 'security_page_toplevel_page_itsec_pro', 'malware_scheduling-settings-2', false );
			echo '</div>';

			echo '<p>' . PHP_EOL;

			settings_fields( 'security_page_toplevel_page_itsec_pro' );

			echo '<input class="button-primary" name="submit" type="submit" value="' . __( 'Save All Changes', 'it-l10n-ithemes-security-pro' ) . '" />' . PHP_EOL;

			echo '</p>' . PHP_EOL;

		} else {

			printf( '<p>%s <a href="?page=toplevel_page_itsec_settings#malware_options">%s</a> %s.</p>', __( 'You must', 'it-l10n-ithemes-security-pro' ), __( 'enable Malware Detection and provide a valid API key', 'it-l10n-ithemes-security-pro' ), __( 'to use this feature', 'it-l10n-ithemes-security-pro' ) );

		}

	}

	/**
	 * Sanitize and validate input
	 *
	 * @since 1.6
	 *
	 * @param  Array $input array of input fields
	 *
	 * @return Array         Sanitized array
	 */
	public function sanitize_module_input( $input ) {

		$input['enabled']           = ( isset( $input['enabled'] ) && intval( $input['enabled'] == 1 ) ? true : false );
		$input['standard']          = ( isset( $input['standard'] ) && intval( $input['standard'] == 1 ) ? true : false );
		$input['standard_interval'] = isset( $input['standard_interval'] ) ? absint( $input['standard_interval'] ) : 5;

		//Build an array of items for individual scan
		if ( isset( $input['individual'] ) ) {

			foreach ( $input['individual'] as $index => $item ) {

				if ( strlen( sanitize_text_field( $input['individual'][ $index ]['resource'] ) ) > 0 ) {

					$input['individual'][ $index ]['type'] = isset( $item['type'] ) && $item['type'] == 1 ? 1 : 0;

					$input['individual'][ $index ]['resource'] = sanitize_text_field( $input['individual'][ $index ]['resource'] );

					if ( $input['individual'][ $index ]['type'] === 1 ) {

						if ( file_exists( trailingslashit( ITSEC_Lib::get_home_path() ) . $input['individual'][ $index ]['resource'] ) !== true ) {

							$input['enabled'] = false;

							$type = 'error';

							$message = sprintf( '%s <strong>%s</strong> %s<br />', __( 'The resource ', 'it-l10n-ithemes-security-pro' ), sanitize_text_field( $input['individual'][ $index ]['resource'] ), __( 'is not valid. Please try again.', 'it-l10n-ithemes-security-pro' ) );

							add_settings_error( 'itsec', esc_attr( 'settings_updated' ), $message, $type );

						}

					} else {

						if ( ITSEC_Lib::validate_url( $input['individual'][ $index ]['resource'] ) != true ) {

							$input['enabled'] = false;

							$type = 'error';

							$message = sprintf( '%s <strong>%s</strong> %s<br />', __( 'The resource ', 'it-l10n-ithemes-security-pro' ), sanitize_text_field( $input['individual'][ $index ]['resource'] ), __( 'is not valid. Please try again.', 'it-l10n-ithemes-security-pro' ) );

							add_settings_error( 'itsec', esc_attr( 'settings_updated' ), $message, $type );

						}

					}

				} else {

					unset( $input['individual'][ $index ] );

				}

			}

		} else {

			$input['individual'] = array();

		}

		//Clean out extras from last scans
		if ( $input['enabled'] === true ) {

			$last_scans = get_site_option( 'itsec_malware_scheduling_last_scans' );

			if ( is_array( $last_scans ) && sizeof( $last_scans ) > 0 && is_array( $input['individual'] ) && sizeof( $input['individual'] ) > 0 ) {

				foreach ( $last_scans as $resource => $scan ) {

					$found = false; //Assume we're no longer scheduling a scan for the item previously scanned

					if ( $resource === 'standard' || $resource === 'overall' ) {
						$found = true; //Overall and standard last scans should always be true
					}

					if ( $found === false ) {

						foreach ( $input['individual'] as $item ) {

							if ( $resource == $item['resource'] ) {
								$found = true;
							}

						}

						if ( $found === false ) {
							unset( $last_scans[ $resource ] ); //Remove the resource from last scans if not found
						}

					}

				}

				update_site_option( 'itsec_malware_scheduling_last_scans', $last_scans );

			}

		} else {

			delete_site_option( 'itsec_malware_scheduling_last_scans' ); //If scanned malware scheduling isn't enabled delete the "last scans" data from the options table

		}

		if ( is_multisite() ) {

			$this->core->show_network_admin_notice( false );

			$this->settings = $input;

		}

		return $input;

	}

	/**
	 * echos Enable Scheduled Malware Scanning Field
	 *
	 * @since 4.4
	 *
	 * @return void
	 */
	public function settings_field_enabled() {

		if ( isset( $this->settings['enabled'] ) && $this->settings['enabled'] === true ) {
			$enabled = 1;
		} else {
			$enabled = 0;
		}

		echo '<input type="checkbox" id="itsec_malware_scheduling_enabled" name="itsec_malware_scheduling[enabled]" value="1" ' . checked( 1, $enabled, false ) . '/>';
		echo '<label for="itsec_malware_scheduling_enabled"> ' . __( 'Enable scheduled malware scanning.', 'it-l10n-ithemes-security-pro' ) . '</label>';

	}

	/**
	 * echos Individual scans field
	 *
	 * @since 4.4
	 *
	 * @return void
	 */
	public function settings_field_individual() {

		if ( isset( $this->settings['individual'] ) ) {

			$individual = $this->settings['individual'];

		} else {

			$individual = array(
				array(
					'type'     => 0,
					'resource' => get_home_url(),
				),
			);

		}

		echo '<div class="repeat">';

		echo '<table id="scheduling_table" class="wrapper" width="100%">';
		echo ' <thead>';
		echo ' <tr>';
		echo ' <td width="10%" colspan="4" style="padding: 15px 0"><span class="add button-secondary"> ' . __( 'Add Scan', 'it-l10n-ithemes-security-pro' ) . '</span></td>';
		echo ' </tr>';
		echo ' </thead>';
		echo ' <tbody class="container">';

		$count = 0;

		foreach ( $individual as $item ) {

			$this->settings_field_individual_form( $count, $item );

			$count ++;

		}

		$this->settings_field_individual_form();

		echo '</tbody>';
		echo '</table>';
		echo '</div>';

	}

	/**
	 * Displays form elements for individual scheduled items
	 *
	 * @since 4.3
	 *
	 * @param int   $count the row count
	 * @param array $item  the item to populate
	 *
	 * @return void
	 */
	private function settings_field_individual_form( $count = null, $item = null ) {

		if ( $count === null ) {

			$count    = '{{row-count-placeholder}}';
			$template = 'template';
			$display  = ' style="display: none;"';

		} else {

			$count    = absint( $count );
			$template = '';
			$display  = '';

		}

		$type            = isset( $item['type'] ) ? absint( $item['type'] ) : 0;
		$file_type_class = $type == 1 ? ' file-dialog' : '';
		$resource        = isset( $item['resource'] ) ? sanitize_text_field( $item['resource'] ) : '';

		echo '<tr class="' . $template . ' row">';
		echo '<td class="itsec_repeater_field">';
		echo '<select class="itsec_malware_scheduling_individual_type" name="itsec_malware_scheduling[individual][' . $count . '][type]">';
		echo '<option value="0" ' . selected( $type, 0, false ) . '>' . __( 'URL', 'it-l10n-ithemes-security-pro' ) . '</option>';
		echo '<option value="1" ' . selected( $type, 1, false ) . '>' . __( 'File', 'it-l10n-ithemes-security-pro' ) . '</option>';
		echo '</select>';
		echo '</td>';
		echo '<td class="itsec_repeater_field">';
		echo '<div id="itsec-log-malware-row-' . $count . '" class="file-chooser-div" style="display:none;" ><div class=" file_chooser jquery_file_tree' . $display . '"></div></div>';
		echo '<input id="' . $count . '" rel="itsec-log-malware-row-' . $count . '" class="itsec_malware_scheduling_individual_resource' . $file_type_class . '" type="text" name="itsec_malware_scheduling[individual][' . $count . '][resource]" value="' . $resource . '" placeholder="' . get_home_url() . '" data-url="' . get_home_url() . '" />';
		echo '</td>';
		echo '</td>';
		echo ' <td width="10%" colspan="3"><span class="remove button-secondary"> ' . __( 'Remove', 'it-l10n-ithemes-security-pro' ) . '</span></td>';
		echo '</tr>';

	}

	/**
	 * echos Standard scheduling schedule
	 *
	 * @since 4.4
	 *
	 * @return void
	 */
	public function settings_field_standard() {

		if ( isset( $this->settings['standard'] ) && $this->settings['standard'] === true ) {
			$standard = 1;
		} else {
			$standard = 0;
		}

		echo '<input type="checkbox" id="itsec_malware_scheduling_standard" name="itsec_malware_scheduling[standard]" value="1" ' . checked( 1, $standard, false ) . '/>';
		echo '<label for="itsec_malware_scheduling_standard"> ' . __( 'Enable active content scanning.', 'it-l10n-ithemes-security-pro' ) . '</label>';
		echo '<p class="description"> ' . __( 'This setting scans a page with active visitors at the interval that is set. Over time, this feature ensures that the content users are visiting is scanned and safe.', 'it-l10n-ithemes-security-pro' ) . '</p>';

		if ( isset( $this->settings['standard_interval'] ) ) {
			$standard_interval = absint( $this->settings['standard_interval'] );;
		} else {
			$standard_interval = 1;
		}
		echo '<div id="itsec_malware_scheduling_standard_interval" style="display:none; margin-top: 1em;">';
		echo '<input class="small-text" type="text" id="itsec_malware_scheduling_standard_interval" name="itsec_malware_scheduling[standard_interval]" value="' . $standard_interval . '" />';
		echo '<label for="itsec_malware_scheduling_standard_interval"> ' . __( 'Hours', 'it-l10n-ithemes-security-pro' ) . '</label>';
		echo '<p class="description"> ' . __( 'The frequency, in hours, content should be scanned for malware.', 'it-l10n-ithemes-security-pro' ) . '</p>';
		echo '</div>';

	}

	/**
	 * build file list for malware scheduling fields
	 *
	 * @since 4.4
	 *
	 * @return void
	 */
	public function wp_ajax_itsec_jquery_malware_filetree_ajax() {

		global $itsec_globals;

		if ( ! wp_verify_nonce( sanitize_text_field( $_POST['nonce'] ), 'itsec_jquery_filetree' ) || ! current_user_can( $itsec_globals['plugin_access_lvl'] ) ) {
			die( __( 'Security error!', 'it-l10n-ithemes-security-pro' ) );
		}

		$directory = sanitize_text_field( $_POST['dir'] );

		$directory = urldecode( $directory );

		if ( file_exists( $directory ) ) {

			$files = scandir( $directory );

			natcasesort( $files );

			if ( count( $files ) > 2 ) { /* The 2 accounts for . and .. */

				echo "<ul class=\"jqueryFileTree\" style=\"display: none;\">";

				//two loops keep directories sorted before files

				// All dirs
				foreach ( $files as $file ) {

					if ( file_exists( $directory . $file ) && $file != '.' && $file != '..' && is_dir( $directory . $file ) ) {
						echo '<li class="directory collapsed"><a href="#" rel="' . htmlentities( $directory . $file ) . '/">' . htmlentities( $file ) . '</a></li>';
					}

				}

				// All files
				foreach ( $files as $file ) {

					if ( file_exists( $directory . $file ) && $file != '.' && $file != '..' && ! is_dir( $directory . $file ) ) {

						$ext = preg_replace( '/^.*\./', '', $file );
						echo '<li class="file ext_' . $ext . '"><a href="#" class="file-link" rel="' . htmlentities( $_POST['dir'] . $file ) . '">' . htmlentities( $file ) . '</a></li>';

					}

				}

				echo "</ul>";

			}

		}

		exit;

	}

}